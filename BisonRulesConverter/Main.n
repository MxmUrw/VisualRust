using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Console;
using System.Linq;

using BisonRulesParser;

using Nitra.Declarations;
using Nitra.ProjectSystem;

module Program
{
    Main() : void
    {
        def lang = NitraBison.Instance;
        def file = FsFile("parser-lalr.y", lang);
        def context = DependentPropertyEvalContext();
        
        def filesData = ImmutableArray.Create(array[file.GetEvalPropertiesData()]);
        def scope   = TableScope("Variables", null);  
        def propsEvalHost = BisonRulesParser.BisonProjectEvalPropertiesHost(filesData, scope);
        
        propsEvalHost.EvalProperties(context, "Collect variables", 0); 
        propsEvalHost.EvalProperties(context, "Compute variables", 1);
        
        WriteLine(GenerateNitraGrammar(file.Ast :> GrammarFile));
        _ = ReadLine();
    }
    
    GenerateNitraGrammar(grammarFile : GrammarFile) : string
    {   
        $<#..$(grammarFile.Rules;"\n\n";GenerateRule)#>
    }
    
    GenerateRule(rule : Rule) : string
    {
        def components    = rule.RuleComponents.OfType.[RuleComponent.NotEmpty]().Map(x => x.Symbols.NToList()).NToList();
        def suffix        = if (rule.IsOptional) "?" else "";
        def currentIndent = "";
        def subruleIndent = "    ";
            
        if (!rule.HasDirectLeftRecursion)
        {
            GenerateRule(rule.Name.Text, components, [], suffix)
        }
        else
        {
            def (heads, tails) = components.Partition(c => 
                    match (c.First())
                    {
                        | c is Symbol.Reference => c.Reference.Id != rule.Name.Id
                        | _ => true
                    });
                    
            def ruleWithoutLeftRecursion = (heads, tails.Map(symbols => symbols.Skip(1).NToList()));
            
            match (ruleWithoutLeftRecursion)
            {
                | ([], tails)                              => GenerateRule(rule.Name.Text, tails, [], "*", currentIndent)
                | (heads, tails) when Equals(heads, tails) => GenerateRule(rule.Name.Text, tails, [], "+", currentIndent)
                | ([[head]], [[delim, tail]]) when Equals(head, tail) =>
                {
                        def recursionType = if (rule.IsOptional) "*" else "+";
                        GenerateRule(rule.Name.Text,
                                [[$<#($(GenerateSymbol(head));$(GenerateSymbol(delim)))$recursionType#>]],
                                [
                                ],
                                "")
                }
                | ([head], [tail]) =>
                {
                        GenerateRule(rule.Name.Text,
                                [[$<#..$(head;" ";GenerateSymbol)#>, $<#(..$(tail;" ";GenerateSymbol))*#>]],
                                [
                                ],
                                suffix)
                }
                | ([head], tails) =>
                {
                        GenerateRule(rule.Name.Text,
                                [[$<#..$(head;" ";GenerateSymbol)#>, "tails*"]],
                                [
                                    GenerateRule("tails", tails, [], currentIndent, subruleIndent)
                                ],
                                suffix)
                }
                | (heads, [tail]) =>
                {
                        GenerateRule(rule.Name.Text,
                                [["heads", $<#(..$(tail;" ";GenerateSymbol))*#>]],
                                [
                                    GenerateRule("heads", heads, [], currentIndent, subruleIndent),
                                ],
                                suffix)
                }
                | (heads, tails) => 
                {
                        GenerateRule(rule.Name.Text,
                                [["heads", "tails*"]],
                                [
                                    GenerateRule("heads", heads, [], currentIndent, subruleIndent),
                                    GenerateRule("tails", tails, [], currentIndent, subruleIndent)
                                ],
                                suffix)
                }
            }
        }
    }
                
    GenerateRule(
        name       : string,
        components : list[list[Symbol]],
        subrules   : list[string],
        ruleSuffix = "",
        indent = "") : string
    {
        def components = components.Map(_.Map(GenerateSymbol));
        if (components.Count() == 1)
        {
            GenerateRule(name, components, subrules, ruleSuffix, indent)
        }
        else
        {
            def compSuffix = FindPrefix(components);
            def compPrefix = FindSuffix(components.Map(symbols => symbols.Skip(compSuffix.Count()).NToList()));
            def compBody   = components.Map(symbols => symbols.Skip(compSuffix.Count()).Take(symbols.Count() - compPrefix.Count() - compSuffix.Count()).NToList()).OrderBy(x => x.Length).NToList();
            
            match ((compSuffix, compBody, compPrefix))
            {
                | (suffix, [[], [body]], prefix) => GenerateRule(name, [suffix + [$"$(body)?"] + prefix], subrules, ruleSuffix, indent)                
                | (suffix, [[], body], prefix) => GenerateRule(name, [suffix + [$<#(..$(body;" "))?#>] + prefix], subrules, ruleSuffix, indent)         
//                | (suffix, [] :: body, prefix) => GenerateRule(name, [suffix + [$"$(name)_alts?"] + prefix], [GenerateRule($"$(name)_alts", body, subrules, indent, indent + "    ")], ruleSuffix, indent)
//                | (suffix, body, prefix) when body.Any() && (suffix.Any() || prefix.Any()) => GenerateRule(name, [suffix + [$"$(name)_alts"] + prefix], [GenerateRule($"$(name)_alts", body, subrules, indent, indent + "    ")], ruleSuffix, indent)
                | _ => GenerateRule(name, components, subrules, ruleSuffix, indent)
            }
        }
    }
                
    GenerateRule(
        name       : string,
        components : list[list[string]],
        subrules   : list[string],
        suffix = "",
        indent = "") : string
    {
        match ((components, suffix))
        {
            | ([[symbol]],  _) => GenerateRule(name, [$"$(symbol)$(suffix)"], subrules, indent)
            | ([symbols], "")  => GenerateRule(name, [$<#..$(symbols;" ")#>], subrules, indent)
            | ([symbols], _)   => GenerateRule(name, [$<#(..$(symbols;" "))$(suffix)#>], subrules, indent)
            | (_, "")          => GenerateRule(name, components.MapI((index, symbols) => $<#$(indent)    | $(name)$(index) = ..$(symbols;" ")#>), subrules, indent)
            | _                => GenerateRule(name, [[$"internal$(suffix)"]], [GenerateRule("internal", components, subrules, "", "    ")], "", indent)
        }
    }
    
    GenerateRule(name : string, components : list[string], subrules : list[string], indent = "") : string
    {
        | (_,[component],[],_) =>
$<#$(indent)syntax $(name) = $(component);#>

        | (_,[component],_,_)  =>
$<#$(indent)syntax $(name) = $(component)
$(indent){
..$(subrules;"\n")
$(indent)}#>

        | _ =>
$<#$(indent)syntax $(name)
$(indent){
..$(components;"\n")..$(subrules;"\n")
$(indent)}#>
    }
    
    GenerateSymbol(symbol : Symbol) : string
    {
        | x is Symbol.Reference => x.Reference.Text
        | x is Symbol.CharacterLiteral when x.Value.Value.Length  > 1 => $<#"$(x.Value.Value)"#>
        | x is Symbol.CharacterLiteral when x.Value.Value.Length == 1 => $<#'$(x.Value.Value)'#>
    }
    
    FindPrefix(components : list[list[string]]) : list[string]
    {
        def FindPrefix(sample, components)
        {
            | ([], _)                => []
            | (sample, [])           => sample
            | (sample, head :: tail) => FindPrefix(sample.Zip(head, tuple => tuple).TakeWhile(((sample, head), _) => sample == head).Map((sample, _) => sample), tail)
        }
        
        match (components)
        {
            | []           => []
            | head :: []   => head
            | head :: tail => FindPrefix(head, tail)
        }
    }
    
    FindSuffix(components : list[list[string]]) : list[string]
    {
        FindPrefix(components.Map(_.Rev())).Rev()
    }    
    
    Equals(left : list[list[Symbol]], right : list[list[Symbol]]) : bool
    {
        left.Map(_.Map(GenerateSymbol)) == right.Map(_.Map(GenerateSymbol))
    }

    Equals(left : Symbol, right : Symbol) : bool
    {
        GenerateSymbol(left) == GenerateSymbol(right)
    }

}
