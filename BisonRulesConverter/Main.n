using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using BisonRulesParser;

using Nitra.Declarations;
using Nitra.ProjectSystem;

module Program
{
    Main() : void
    {
        def lang = NitraBison.Instance;
        def file = FsFile("parser-lalr.y", lang);
        def context = DependentPropertyEvalContext();
        def propsEvalHost = ProjectEvalPropertiesHost([file]);
        
        propsEvalHost.EvalProperties(context, "Collect variables", 0); 
        propsEvalHost.EvalProperties(context, "Compute variables", 1);
        
        WriteLine(GenerateNitraGrammar(file.Ast :> GrammarFile));
        _ = ReadLine();
    }
    
    GenerateNitraGrammar(grammarFile : GrammarFile) : string
    {   
        $<#..$(grammarFile.Rules;"\n\n";GenerateRule)#>
    }
    
    GenerateRule(rule : Rule) : string
    {
        def components    = rule.RuleComponents.OfType.[RuleComponent.NotEmpty]().Map(x => x.Symbols.NToList()).NToList();
        def suffix        = if (rule.IsOptional) "?" else "";
        def currentIndent = "";
        def subruleIndent = "    ";
            
        if (!rule.HasDirectLeftRecursion)
        {
            GenerateRule(rule.Name.Text, components, [], suffix)
        }
        else
        {
            def (heads, tails) = components.Partition(c => 
                    match (c.First())
                    {
                        | c is Symbol.Reference => c.Reference.Id != rule.Name.Id
                        | _ => true
                    });
                    
            def ruleWithoutLeftRecursion = (heads, tails.Map(symbols => symbols.Skip(1).NToList()));
            
            match (ruleWithoutLeftRecursion)
            {
                | ([], tails)                              => GenerateRule(rule.Name.Text, tails, [], "*", currentIndent)
                | (heads, tails) when Equals(heads, tails) => GenerateRule(rule.Name.Text, tails, [], "+", currentIndent)
                | (heads, tails)                           => GenerateRule(rule.Name.Text,
                                                                    [["heads", "tails*"]],
                                                                    [
                                                                        GenerateRule("heads", heads, [], currentIndent, subruleIndent),
                                                                        GenerateRule("tails", tails, [], currentIndent, subruleIndent)
                                                                    ],
                                                                    suffix)
            }
        }
    }
    
    GenerateRule(
        name       : string,
        components : list[list[Symbol]],
        subrules   : list[string],
        suffix = "",
        indent = "") : string
    {
        GenerateRule(name, components.Map(_.Map(GenerateSymbol)), subrules, suffix, indent) 
    }
            
    GenerateRule(
        name       : string,
        components : list[list[string]],
        subrules   : list[string],
        suffix = "",
        indent = "") : string
    {        
        match ((components, suffix))
        {
            | ([[symbol]],  _) => GenerateRule(name, [$"$(symbol)$(suffix)"], subrules, indent)
            | ([symbols], "")  => GenerateRule(name, [$<#..$(symbols;" ")#>], subrules, indent)
            | ([symbols], _)   => GenerateRule(name, [$<#(..$(symbols;" "))$(suffix)#>], subrules, indent)
            | (_, "")          => GenerateRule(name, components.MapI((index, symbols) => $<#$(indent)    | $(name)$(index) = ..$(symbols;" ")#>), subrules, indent)
            | _                => GenerateRule(name, [[$"internal$(suffix)"]], [GenerateRule("internal", components, subrules, "", "    ")], "", indent)
        }
    }
    
    GenerateRule(name : string, components : list[string], subrules : list[string], indent = "") : string
    {
        | (_,[component],[],_) =>
$<#$(indent)syntax $(name) = $(component);#>

        | (_,[component],_,_)  =>
$<#$(indent)syntax $(name) = $(component)
$(indent){
..$(subrules;"\n")
$(indent)}#>

        | _ =>
$<#$(indent)syntax $(name)
$(indent){
..$(components;"\n")..$(subrules;"\n")
$(indent)}#>
    }
    
    GenerateSymbol(symbol : Symbol) : string
    {
        | x is Symbol.Reference => x.Reference.Text
        | x is Symbol.CharacterLiteral when x.Value.Value.Length  > 1 => $<#"$(x.Value.Value)"#>
        | x is Symbol.CharacterLiteral when x.Value.Value.Length == 1 => $<#'$(x.Value.Value)'#>
    }
    
    Equals(left : list[list[Symbol]], right : list[list[Symbol]]) : bool
    {
        left.Map(_.Map(GenerateSymbol)) == right.Map(_.Map(GenerateSymbol))
    }
}
