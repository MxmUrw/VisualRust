using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Declarations;

namespace BisonRulesParser
{
    public module AstUtils
    {
        public ContainsType[T](this collection : IEnumerable[T], t : System.Type)  :bool 
        {
            collection.Any(c => c.GetType().IsAssignableFrom(t));
        }
        
        public ContainsDirectRecursionTo(this collection : IEnumerable[RuleComponent], name : Name) : bool
        {
            def HasRecursiveFirstSymbol(component : RuleComponent.NotEmpty)
            {
                match(NList.ToList(component.Symbols))
                {
                    | (first is Symbol.Reference) :: _ => first.Reference.Id == name.Id
                    | _ => false
                }
            }
 
            collection.OfType.[RuleComponent.NotEmpty]().Any(HasRecursiveFirstSymbol)
        }
    }
}
