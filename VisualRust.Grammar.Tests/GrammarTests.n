using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.IO;
using System.Web;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using VisualRust.Grammar;
using Nitra.ProjectSystem;

using System.Threading;

namespace VisualRust.Grammar.Tests
{
    [TestClass]  
    public class GrammarTests
    {   
        public TestContext : TestContext { get; set; }
  
        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/run-make", "run-make.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "run-make.xml", "Filename", DataAccessMethod.Sequential)]
        public RunMake() : void
        {
            RunTest(PositiveTest)
        }
                
        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/run-pass", "run-pass.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "run-pass.xml", "Filename", DataAccessMethod.Sequential)]
        public RunPass() : void
        {
            RunTest(PositiveTest)
        }
        
        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/run-pass-fulldeps", "run-pass-fulldeps.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "run-pass-fulldeps.xml", "Filename", DataAccessMethod.Sequential)]
        public RunPassFulldeps() : void
        {
            RunTest(PositiveTest)
        }
        
        [TestMethod]
        [RustTestDirectory("../../examples", "examples.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "examples.xml", "Filename", DataAccessMethod.Sequential)]
        public Examples() : void
        {
            RunTest(PositiveTest)
        }
        
        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/compile-fail", "compile-fail.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "compile-fail.xml", "Filename", DataAccessMethod.Sequential)]
        public CompileFail() : void
        {
            RunTest(CompilerNegativeTest)
        }
          
        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/compile-fail-fulldeps", "compile-fail-fulldeps.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "compile-fail-fulldeps.xml", "Filename", DataAccessMethod.Sequential)]
        public CompileFailFullDeps() : void
        {
            RunTest(CompilerNegativeTest)
        }
  
        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/parse-fail", "parse-fail.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "parse-fail.xml", "Filename", DataAccessMethod.Sequential)]
        public ParseFailFullDeps() : void
        {
            RunTest(NegativeTest)
        }

        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/run-fail", "run-fail.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "run-fail.xml", "Filename", DataAccessMethod.Sequential)]
        public RunFail() : void
        {
            RunTest(NegativeTest)
        }

        [TestMethod]
        [RustTestDirectory("../../../rust/src/test/run-fail-fulldeps", "run-fail-fulldeps.xml")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "run-fail-fulldeps.xml", "Filename", DataAccessMethod.Sequential)]
        public RunFailFulldeps() : void
        {
            RunTest(NegativeTest)
        }
        
        [TestMethod]
        [RustTestDirectory("../../../rust/src", "rust-lang.xml", "../../../rust/src/test")]
        [DataSource("Microsoft.VisualStudio.TestTools.DataSource.XML", "rust-lang.xml", "Filename", DataAccessMethod.Sequential)]
        public RustLang() : void
        {
            RunTest(PositiveTest);
        }
        
        private RunTest(action : Action) : void
        {
            mutable exception = None();
            
            def maxStackSize = 32 * 1024 * 1024;
            def thread = Thread(() =>
                try
                {
                    action();
                }
                catch
                {
                    e => exception = Some(e)
                },
                maxStackSize);
                
            thread.Start();
            thread.Join();
            
            exception.Iter(x => throw x);
        }

        private PositiveTest() : void
        {
            def filename = TestContext.DataRow[0] :> string;
            def file = FsFile(filename, NitraRust.Instance);
                 
            Assert.IsTrue(
                file.ParseResult.IsSuccess,
                Uri(Path.GetFullPath(filename)).AbsoluteUri + "\n" + $<#..$(file.GetCompilerMessages();"\n")#>);
        }

        private NegativeTest() : void
        {
            def filename = TestContext.DataRow[0] :> string;
            def file = FsFile(filename, NitraRust.Instance);
                 
            Assert.IsFalse(
                file.ParseResult.IsSuccess,
                Uri(Path.GetFullPath(filename)).AbsoluteUri + "\n" + $<#..$(file.GetCompilerMessages();"\n")#>);
        }

        private CompilerNegativeTest() : void
        {
            def filename = TestContext.DataRow[0] :> string;
            def file = FsFile(filename, NitraRust.Instance);
                 
            Assert.IsTrue(
                file.ParseResult.IsSuccess,
                Uri(Path.GetFullPath(filename)).AbsoluteUri + "\n" + $<#..$(file.GetCompilerMessages();"\n")#>);
        }

        private RunNegativeTest() : void
        {
            def filename = TestContext.DataRow[0] :> string;
            def file = FsFile(filename, NitraRust.Instance);
                 
            Assert.IsTrue(
                file.ParseResult.IsSuccess,
                Uri(Path.GetFullPath(filename)).AbsoluteUri + "\n" + $<#..$(file.GetCompilerMessages();"\n")#>);
        }
    }
}
