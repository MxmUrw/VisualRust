using System;
using System.Threading;
using System.IO;
using System.Text;

using Nitra;
using Nitra.Declarations;
using Nitra.ProjectSystem;

using NUnit.Framework;

using VisualRust.NitraIntegration;

namespace VisualRust.Grammar.Tests
{
    module ParserVerifier
    {
        public VerifyPrettyFile(filename : string) : void
        {   
            def sourceText = File.ReadAllText(filename);
            def prettyText = PrettyPrint(ParseText(sourceText));
            Assert.IsNotEmpty(prettyText);
            Assert.IsTrue(ParseText(prettyText).IsSuccess, GetPathUri(filename));
        }
        
        public VerifyPrettyText(sourceText : string) : void
        {
            def prettyText = PrettyPrint(ParseText(sourceText));
            Assert.IsNotEmpty(prettyText);
            Assert.IsTrue(ParseText(prettyText).IsSuccess);
        }
                
        public VerifyPositiveFile(filename : string) : void
        {
            def file = FsFile(filename, NitraRust.Instance);
            when (!file.ParseResult.IsSuccess)
            {
                TestContext.Write(GetMessage(file));
                Assert.Fail(GetPathUri(filename));
            }
        }        
        
        public VerifyNegativeFile(filename : string) : void
        {
            def file = FsFile(filename, NitraRust.Instance);
            Assert.IsFalse(file.ParseResult.IsSuccess, GetPathUri(filename));
        }
        
        private GetPathUri(filename : string) : string
        {
            Uri(Path.GetFullPath(filename)).AbsoluteUri
        }

        private GetMessage(file : FsFile[IAst]) : string
        {
            "\t\t" + $<#..$(file.GetCompilerMessages();"\n\t\t")#>
        }
        
        private PrettyPrint(parseResult : IParseResult) : string
        {
            def stringBuilder = StringBuilder();
            def prettyPrintWalker = PrettyPrintWalker();
            prettyPrintWalker.Walk(parseResult, stringBuilder);
            stringBuilder.ToString();
        }
        
        private ParseText(text : string) : IParseResult
        {
            def lang = NitraRust.Instance;
            def session = Nitra.ParseSession(lang.StartRule, lang.CompositeGrammar);
            session.Parse(text)
        }
    }
}
