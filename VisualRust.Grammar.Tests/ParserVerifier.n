using System;
using System.Threading;
using System.IO;

using Nitra.Declarations;
using Nitra.ProjectSystem;

using NUnit.Framework;

namespace VisualRust.Grammar.Tests
{
    module ParserVerifier
    {
        public VerifyPositiveFile(filename : string) : void
        {
            def file = ParseFileWithExtendedStack(filename);
            when (!file.ParseResult.IsSuccess)
            {
                TestContext.Write(GetMessage(file));
                Assert.Fail(GetPathUri(filename));
            }
        }        
        
        public VerifyNegativeFile(filename : string) : void
        {
            def file = ParseFileWithExtendedStack(filename);
            Assert.IsFalse(file.ParseResult.IsSuccess, GetPathUri(filename));
        }
        
        private GetPathUri(filename : string) : string
        {
            Uri(Path.GetFullPath(filename)).AbsoluteUri
        }

        private ParseFileWithExtendedStack(filename : string) : FsFile[IAst]
        {
            mutable file      = None();
            mutable exception = None();
            
            def maxStackSize = 32 * 1024 * 1024;
            def thread = Thread(() =>
                try
                {
                    file = Some(FsFile(filename, NitraRust.Instance))
                }
                catch
                {
                    e => exception = Some(e)
                },
                maxStackSize);
                
            thread.Start();
            thread.Join();
            
            exception.Iter(x => throw x);
            
            file.Value
        }
        
        private GetMessage(file : FsFile[IAst]) : string
        {
            "\t\t" + $<#..$(file.GetCompilerMessages();"\n\t\t")#>
        }
    }
}
