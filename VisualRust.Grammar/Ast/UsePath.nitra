using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Declarations;
using Nitra;

namespace VisualRust.Grammar
{
	abstract ast PathReference
	{
		| Self
		| Super
		| Reference { Value : Nitra.Declarations.Reference; }
	}

	abstract ast RefOrSelfPathReference
    {
		| Simple { PathReference : PathReference; }
		| Aliased { PathReference : PathReference; Alias : Name;}
    } 

	abstract ast UsePath
	{
		| Simple
		{
			IsGlobal : bool;
			Path : PathReference*;
		}
		| Aliased
		{
			IsGlobal : bool;
			Path : PathReference*;
			Alias : Name;
		}
		| Multi
		{
			IsGlobal : bool;
			Path : PathReference*;
			Tails : RefOrSelfPathReference*;
		}
		| Empty
		| Asterisk
		{
			IsGlobal : bool;
			Path : PathReference*;
		}
	}

	map syntax Rules.path_no_types_allowed_tail -> PathReference
	{
		| tail0 -> Reference 
		{
			Reference -> Value;
		}
		| tail1 -> Super {}
	}
	
	map syntax Rules.path_no_types_allowed -> PathReference* = AstUtils.Convert_path_no_types_allowed(this);

	map syntax Rules.path_no_types_allowed_head -> PathReference
	{
		| head0 -> Reference
		{
			Reference -> Value;
		}
		| head1 -> Self {}
		| head2 -> Super {}
	}

	map syntax Rules.ref_or_self -> PathReference
	{
		| ident_or_self0 -> Reference
		{
			Reference -> Value;
		}

		| ident_or_self1 -> Self {}
	}

	map syntax Rules.refs_or_self_part -> RefOrSelfPathReference
	{
	  match (NameOpt)
	  {
		| Some((_, name)) -> RefOrSelfPathReference.Aliased { Ref_or_self -> PathReference; name -> Alias; }
		| None            -> RefOrSelfPathReference.Simple  { Ref_or_self -> PathReference; }
	  }
	}

	map syntax Rules.refs_or_self -> RefOrSelfPathReference*
	{
		Refs_or_self_parts.Item1
	}

	map syntax Rules.view_path -> UsePath
	{
		| view_path0 -> UsePath.Simple
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
		}
		| view_path1 -> UsePath.Empty { }
		
		| view_path2 -> UsePath.Empty { }
		
		| view_path3  -> UsePath.Multi
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
			Refs_or_self -> Tails;
		}
		| view_path4  -> UsePath.Multi
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path = PathReference.AstList(this);
			Refs_or_self -> Tails;
		}
		| view_path5  -> Asterisk
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
		}
		| view_path6  -> Aliased
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
			Name -> Alias;
		}
	}
}
