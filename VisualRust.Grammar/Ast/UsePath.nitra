using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Declarations;
using Nitra;

using VisualRust.Grammar.Ast;

namespace VisualRust.Grammar
{
	map syntax Rules.path_no_types_allowed_tail -> PathReference
	{
		| tail0 -> Simple 
		{
			Reference -> Value;
		}
		| tail1 -> Super {}
	}

	map syntax Rules.path_no_types_allowed_tail(qualifier : PathReference) -> PathReference
	{
		| tail0 -> Qualified
		{
			Reference -> Value;
			qualifier -> Qualifier;
		}
		| tail1 -> Super {}
	}
	
	map syntax Rules.path_no_types_allowed -> PathReference = AstUtils.Convert_path_no_types_allowed(this);

	map syntax Rules.path_no_types_allowed_head -> PathReference
	{
		| head0 -> Simple
		{
			Reference -> Value;
		}
		| head1 -> Self {}
		| head2 -> Super {}
	}

	map syntax Rules.ref_or_self -> PathReference
	{
		| ident_or_self0 -> Simple
		{
			Reference -> Value;
		}

		| ident_or_self1 -> Self {}
	}

	map syntax Rules.refs_or_self_part -> RefOrSelfPathReference
	{
	  match (NameOpt)
	  {
		| Some((_, name)) -> RefOrSelfPathReference.Aliased { Ref_or_self -> PathReference; name -> Alias; }
		| None            -> RefOrSelfPathReference.Simple  { Ref_or_self -> PathReference; }
	  }
	}

	map syntax Rules.refs_or_self -> RefOrSelfPathReference*
	{
		Refs_or_self_parts.Item1
	}

	map syntax Rules.view_path -> UsePath
	{
		| view_path0 -> UsePath.Simple
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
		}
		| view_path1 -> UsePath.Empty { }
		
		| view_path2 -> UsePath.Empty { }
		
		| view_path3  -> UsePath.Multi
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
			Refs_or_self -> Tails;
		}
		| view_path4  -> UsePath.OnlyTails
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			
			References.Item1 -> Tails;
		}
		| view_path5  -> Asterisk
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
		}
		| view_path6  -> Aliased
		{
			IsGlobal = ParsedValue(MOD_SEPOpt.Span, MOD_SEPOpt.HasValue);
			Path_no_types_allowed -> Path;
			Name -> Alias;
		}
	}
}
