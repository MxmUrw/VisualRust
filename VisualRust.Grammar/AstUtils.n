using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using Nitra;

using VisualRust.Grammar.Ast;

namespace VisualRust.Grammar
{
    public module AstUtils
    {
        public Filter(this value: ListParseTree[RulesParseTree.inner_attr]) : IEnumerable[RulesParseTree.inner_attr.inner_attr0]
        {
            value.OfType.[RulesParseTree.inner_attr.inner_attr0]()
        }

        public Convert_path_no_types_allowed(path_no_types_allowed : RulesParseTree.path_no_types_allowed) : PathReference
        {
            def headAst = path_no_types_allowed.Path_no_types_allowed_head.GetAst();
            def tails = NList.ToList(path_no_types_allowed.Path_no_types_allowed_tails);
                
            tails.FoldLeft(headAst, (tail, acc) => tail.GetAst(acc));
        }

        public ConvertUsePath(usePath : UsePath) : ModuleItem.UseItem
        {
            def GetDeclarations(multi)
            {
                def aliasedTails = multi.Tails.OfType.[RefOrSelfPathReference.Aliased]() ;
                NList.ToList(aliasedTails).MapToArray(tail =>UseAliasDeclaration(tail.Alias.Location, tail.Alias))
            }
            
            def declarations = 
                match(usePath)
                {
                    | Aliased as aliased => array[UseAliasDeclaration(aliased.Alias.Location, aliased.Alias)]
                    | Multi as multi     => GetDeclarations(multi)
                    | _                  =>  array[]
                };
           
            ModuleItem.UseItem(usePath.Location, UseAliasDeclaration.AstList(usePath.Location, declarations), usePath, true)
        }
    }
}
