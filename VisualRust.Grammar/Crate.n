using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Linq;
using System.Threading;

using Nitra.Declarations;
using Nitra.ProjectSystem;

using VisualRust.Grammar.Ast;

namespace VisualRust.Grammar
{
    public partial class Crate : AstBase, IProjectSupport
    {
        private CreateRootModule() : ModuleSymbol
        {
            def rootModule = ModuleSymbol();
            
            rootModule.MemberTable = TableScope("<crate root>", rootModule);
            rootModule.DeclaredIn  = null;
            rootModule.FullName    = string.Empty;
            
            rootModule;
        }
        
        public RefreshReferences(cancellationToken : CancellationToken, project : Project) : object
        {
            IgnoreParams();
            def context = DependentPropertyEvalContext();
            
            def root = CreateRootModule();
            root.EvalProperties(context);
            
            (context, root);
        }

        public RefreshProject(cancellationToken : CancellationToken, files : ImmutableArray[FileEvalPropertiesData], data : object) : void
        {
            def (context, root) = data :> (DependentPropertyEvalContext * ModuleSymbol);
            
            def scope   = root.MemberTable;
            context.CancellationToken = cancellationToken;

            def removeParsedSymbols(tableScope : TableScope)
            {
              tableScope.Undefine(_.IsParsed);
              foreach (symbols in tableScope.Symbols)
              foreach (symbol is ModuleSymbol in symbols)
                removeParsedSymbols(symbol.MemberTable);
            }

            removeParsedSymbols(root.MemberTable);
            
            def evalHost = VisualRustProjectEvalPropertiesHost(files, scope, root);
            evalHost.EvalProperties(context, "Collect variables", 0);
            evalHost.EvalProperties(context, "Compute variables", 1);

            foreach (crate in files.Select(_.Ast).OfType.[Crate]())
            {
                crate.ContainingTable = scope; 
                crate.Root = root;
            }
        }
    }

    class VisualRustProjectEvalPropertiesHost : ProjectEvalPropertiesHost
    {
        _scope : TableScope;
        _root : ModuleSymbol;

        public this(files : ImmutableArray[FileEvalPropertiesData], scope : TableScope, root : ModuleSymbol)
        {
            base(files, ImmutableArray.Create(root));
            _scope = scope;
            _root = root;
        }

        protected override BeforeStage(context : DependentPropertyEvalContext, _passName : string) : void
        {
            foreach (crate in _files.Select(_.Ast).OfType.[Crate]())
            {
                match(context.Stage)
                {
                    | 0 => crate.Root = _root;
                    | 1 => crate.ContainingTable = _scope;
                    | _ => ()
                }
            }
        }
    }
}
