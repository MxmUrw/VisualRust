namespace Nitrust.Rust.Grammar
{
  syntax module Identifiers
  {
	using Nitra.Core;

	keyword regex ['A'..'Z', 'a'..'z']+ rule S;
	regex KeywordToken =  
				"abstract"	| "alignof"	| "as"			| "become"		| "box"		|
				"break"		| "const"	| "continue"	| "crate"		| "do"		|
				"else"		| "enum"	| "extern"		| "false"		| "final"	|
				"fn"		| "for"		| "if"			| "impl"		| "in"		|
				"let"		| "loop"	| "macro"		| "match"		| "mod"		|
				"move"		| "mut"		| "offsetof"	| "override"	| "priv"	|
				"proc"		| "pub"		| "pure"		| "ref"			| "return"	|
				"Self"		| "self"	| "sizeof"		| "static"		| "struct"	|
				"super"		| "trait"	| "true"		| "type"		| "typeof"	|
				"unsafe"	| "unsized"	| "use"			| "virtual"		| "where"	|
				"while"		| "yield";

	regex Identifier = (LetterCharacter IdentifierPartCharacters*) | ("_" IdentifierPartCharacters+);

	[Keyword] token Keyword = Name=KeywordToken !IdentifierPartCharacters;

	[Reference] token Reference = !Keyword Identifier;
  
	[Name] token Name = !Keyword Identifier;
  }
}