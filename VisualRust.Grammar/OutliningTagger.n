using Microsoft.VisualStudio.Text.Tagging;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.VisualStudio.Text;

namespace VisualRust.Grammar
{
    public class OutliningTagger : ITagger[IOutliningRegionTag]
    {
        public this(buffer : ITextBuffer)
        {
            _buffer = buffer;
            _buffer.Changed += (_, _) => BufferChanged();
            TagsChanged += (_, _) => ();
        }
        
        public event TagsChanged : EventHandler[SnapshotSpanEventArgs];
        
        public GetTags(spans : NormalizedSnapshotSpanCollection) : IEnumerable[ITagSpan[IOutliningRegionTag]]
        {
            def document = ParsedDocument.Get(_buffer);
            
            
            def snapshot = document.CurrentSnapshot;
            
            def entire = 
                SnapshotSpan(spans[0].Start, spans[spans.Count - 1].End).TranslateTo(snapshot, SpanTrackingMode.EdgeExclusive);
            
            def start = entire.Start;
            def end = entire.End;


            def outlining = List();
            document.ParseResult.GetOutlining(outlining);
            
            def mapRegion(region : Nitra.OutliningInfo)
            {
                def span = region.Span;
                def tag = OutliningRegionTag(region.IsDefaultCollapsed, region.IsImplementation, "...", "...");
                def snapshotSpan = SnapshotSpan(snapshot, Span(span.StartPos, span.Length));
                def tagSpan = TagSpan.[IOutliningRegionTag](snapshotSpan, tag);
                tagSpan
            }
            
            
            outlining
                .Where(r => r.Span.StartPos <= end && r.Span.EndPos >= start)
                .Select(mapRegion);
          
        }
        
        private BufferChanged() : void
        {
        }
        
        private _buffer : ITextBuffer;
    }
}
