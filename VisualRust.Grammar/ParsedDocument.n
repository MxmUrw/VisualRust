using Microsoft.VisualStudio.Text;
using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using Nitra;

using System;
using System.Collections.Generic;
using System.Linq;

namespace VisualRust.Grammar
{
    public class ParsedDocument
    {
        public ParseResult : IParseResult
        {
            get
            {
                _parseResult.Value
            }
        }
        
        public Update(snapshot : ITextSnapshot) : void
        {
            _parseResult = Lazy(() => Parse(snapshot));
        }

        public static Get(buffer : ITextBuffer ) : ParsedDocument 
        {
            mutable result;
            when (!buffer.Properties.TryGetProperty.[ParsedDocument](Key, out result))
            {
                result = ParsedDocument();
                buffer.Properties.AddProperty(Key, result);
            }
            
            buffer.Changed += (_, arg) => result.Update(arg.After);
            result.Update(buffer.CurrentSnapshot);
            result;
        }
        
        private Parse(snapshot : ITextSnapshot) : IParseResult
        {
            def text = snapshot.GetText();
            def lang = NitraRust.Instance;
            def session = Nitra.ParseSession(lang.StartRule, lang.CompositeGrammar);
            
            session.Parse(text);
        }
        
        private static Key = object();
        private mutable _parseResult : Lazy[IParseResult];
    }
}
