namespace VisualRust.Grammar
{
	using Nitra.Core;
	
	using Identifiers;
	using Literals;

	syntax module Tokens
	{
		regex SHL									= "<<";
		regex SHR									= ">>";
		regex LE									= "<=";
		regex EQEQ									= "==";
		regex NE									= "!=";
		regex GE									= ">=";
		regex ANDAND								= "&&";
		regex OROR									= "||";
		regex SHLEQ									= "<<=";
		regex SHREQ									= ">>=";
		regex MINUSEQ								= "-=";
		regex ANDEQ									= "&=";
		regex OREQ									= "|=";
		regex PLUSEQ								= "+=";
		regex STAREQ								= "*=";
		regex SLASHEQ								= "/=";
		regex CARETEQ								= "^=";
		regex PERCENTEQ								= "%=";
		regex DOTDOT								= "..";
		regex DOTDOTDOT								= "...";
		regex MOD_SEP								= "::";
		regex RARROW								= "->";
		regex LARROW								= "<-";
		regex FAT_ARROW								= "=>";
		token LIT_BYTE								= ByteLiteral;
		[SpanClass(Char)] token LIT_CHAR			= CharacterLiteral;
		syntax LIT_INTEGER							= IntegerLiteral;
		token LIT_FLOAT
		{
		  regex Bad = '.' | '_' | ['a'..'z'] | ['A'..'Z'];

		  | FloatingPointLiteral1 !Bad
		  | FloatingPointLiteral2
		}
		[SpanClass(String)] token LIT_STR			= RegularStringLiteral;
		syntax LIT_STR_RAW							= RawStringLiteral;
		token LIT_BYTE_STR							= RegularByteStringLiteral;
		syntax LIT_BYTE_STR_RAW						= RawByteStringLiteral;
		token IDENT									= !Keyword Identifier;
		regex UNDERSCORE							= "_";
		token LIFETIME								= "'" IDENT;
		[SpanClass(Keyword)] regex SELF				= "self";
		[SpanClass(Keyword)] regex SUPER			= "super";
		[SpanClass(Keyword)] regex STATIC			= "static";
		[SpanClass(Keyword)] regex SIZEOF			= "sizeof";
		[SpanClass(Keyword)] regex AS				= "as";
		[SpanClass(Keyword)] regex BREAK			= "break";
		[SpanClass(Keyword)] regex CRATE			= "crate";
		[SpanClass(Keyword)] regex ELSE				= "else";
		[SpanClass(Keyword)] regex ENUM				= "enum";
		[SpanClass(Keyword)] regex EXTERN			= "extern";
		[SpanClass(Keyword)] regex FALSE			= "false";
		[SpanClass(Keyword)] regex FN				= "fn";
		[SpanClass(Keyword)] regex FOR				= "for";
		[SpanClass(Keyword)] regex IF				= "if";
		[SpanClass(Keyword)] regex IMPL				= "impl";
		[SpanClass(Keyword)] regex IN				= "in";
		[SpanClass(Keyword)] regex LET				= "let";
		[SpanClass(Keyword)] regex LOOP				= "loop";
		[SpanClass(Keyword)] regex MATCH			= "match";
		[SpanClass(Keyword)] regex MOD				= "mod";
		[SpanClass(Keyword)] regex MOVE				= "move";
		[SpanClass(Keyword)] regex MUT				= "mut";
		[SpanClass(Keyword)] regex PRIV				= "priv";
		[SpanClass(Keyword)] regex PUB				= "pub";
		[SpanClass(Keyword)] regex REF				= "ref";
		[SpanClass(Keyword)] regex RETURN			= "return";
		[SpanClass(Keyword)] regex STRUCT			= "struct";
		[SpanClass(Keyword)] regex TRUE				= "true";
		[SpanClass(Keyword)] regex TRAIT			= "trait";
		[SpanClass(Keyword)] regex TYPE				= "type";
		[SpanClass(Keyword)] regex UNSAFE			= "unsafe";
		[SpanClass(Keyword)] regex USE				= "use";
		[SpanClass(Keyword)] regex WHILE			= "while";
		[SpanClass(Keyword)] regex CONTINUE			= "continue";
		[SpanClass(Keyword)] regex PROC				= "proc";
		[SpanClass(Keyword)] regex BOX				= "box";
		[SpanClass(Keyword)] regex CONST			= "const";
		[SpanClass(Keyword)] regex WHERE			= "where";
		[SpanClass(Keyword)] regex TYPEOF			= "typeof";
		[SpanClass(Keyword)] regex DEFAULT			= "default";
		token INNER_DOC_COMMENT						= "//" (!NewLine Any)*; 
		token OUTER_DOC_COMMENT						= "//" (!NewLine Any)*;
		regex SHEBANG								= "#!";
		token SHEBANG_LINE							= "#!" !'[' (!NewLine Any)* NewLine;
		[SpanClass(Keyword)] regex STATIC_LIFETIME	= "'static";
	}
}