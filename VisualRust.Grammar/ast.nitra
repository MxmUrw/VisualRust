using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Declarations;
using Nitra;

namespace VisualRust.Grammar
{
	abstract ast ScopeDefinition
	{
		out Scope : Scope;
	}

	ast Crate : ScopeDefinition
	{
		out ContainingTable : TableScope = TableScope("Global", null);
		
		Attributes : Attribute*;

		ModuleItems : ModuleItem*;

		Attributes.ContainingTable = ContainingTable;
		ModuleItems.ContainingTable = ContainingTable;

		Scope = ContainingTable;
		ModuleItems.DeclaredIn = this;
	}

	map syntax Rules.crate -> Crate
	{
		Inner_attrs -> Attributes;

		Mod_items -> ModuleItems;
	}


	declaration Module : ScopeDefinition, Container
	{
		in DeclaredIn : ScopeDefinition;

		Attributes : Attribute*;
		
		ModuleItems : ModuleItem*;

		Scope = DeclaredIn.Scope;
		
		ModuleItems.DeclaredIn = this;
	}
	
	map syntax Rules.item_mod  -> Module
	{
		| item_mod0 -> Module 
		{
			Name -> Name;
			Attributes = Attribute.AstList(this);
			ModuleItems = ModuleItem.AstList(this);
		}
		
		| item_mod1 -> Module 
		{
			Name -> Name;
			Mod_items -> ModuleItems;
			Inner_attrs -> Attributes;
		}
	}
	
	abstract ast Attribute
	{
		in  ContainingTable : TableScope;

		| Empty
		| NotEmpty
		{
			MetaItem : MetaItemAst;
			MetaItem.ContainingTable = ContainingTable;
		}
	}

	map syntax Rules.inner_attr -> Attribute
	{
		| inner_attr0 -> Attribute.NotEmpty 
		{
			Meta_item -> MetaItem;
		}
		| inner_attr1 -> Attribute.Empty {}
	}

	map syntax Rules.outer_attr -> Attribute
	{
		| outer_attr0 -> Attribute.NotEmpty 
		{
			Meta_item -> MetaItem;
		}
		| outer_attr1 -> Attribute.Empty {}
	}

	abstract ast MetaItemAst
	{
		in  ContainingTable : TableScope;
		| MetaWord { Name : Name; }
		| MetaNameValue	{ Name : Name; }  
		| MetaList { MetaItems : MetaItemAst*; }
	}

	map syntax Rules.meta_item -> MetaItemAst
	{
		| meta_item0 -> MetaWord 
			{ 
				Name -> Name;
			}
		| meta_item1 -> MetaNameValue 
			{
				Name -> Name;
			}
		| meta_item2 -> MetaList { Meta_items.Item1 -> MetaItems; }
	}

	ast AttrsAndVisibility
	{
		Attributes : Attribute*;

		IsVisible : bool;
	}

	map syntax Rules.attrs_and_vis -> AttrsAndVisibility
	{ 
		Outer_attrs -> Attributes;
		
		IsVisible = ParsedValue(PUBOpt.Span, PUBOpt.HasValue);
	}

	declaration UseAliasDeclaration
	{
		
	}

	abstract ast ModuleItem
	{
		in ContainingTable : TableScope;
		in DeclaredIn : ScopeDefinition;
		
		| UseItem
		{
			Declarations : UseAliasDeclaration*;
			UsePath : UsePath;

			Declarations.ContainingTable = ContainingTable;
			
		}
		| ExternCrate
		{
			Crate : Name;
		}
		| ExternCrateWithAlias
		{
			Crate : Name;
			Alias : Name;
		}
		| Module
		{
			Module : VisualRust.Grammar.Module;
			Module.DeclaredIn = DeclaredIn;
		}
		| Other
		
	}

	map syntax Rules.mod_item -> ModuleItem
	{
		Item
	}

	map syntax Rules.item -> ModuleItem
	{
		| item0 -> this.Stmt_item
		| item1 -> Other {}
	}

	map syntax Rules.stmt_item -> ModuleItem
	{
		| stmt_item0  -> Other {}
		| stmt_item1  -> Other {}
		| stmt_item2  -> Other {}
		| stmt_item3  -> this.Block_item
		| stmt_item4  -> this.View_item
	}

	map syntax Rules.block_item -> ModuleItem
	{
		| block_item0 -> Other {}
		| block_item1 -> Other {}
		| block_item2 -> Module { this.Item_mod -> Module; }
		| block_item3 -> Other {}
		| block_item4 -> Other {}
		| block_item5 -> Other {}
		| block_item6 -> Other {}
		| block_item7 -> Other {}
	}

	map syntax Rules.view_item -> ModuleItem
	{
	}
		
	map syntax Rules.view_item.view_item1 -> ModuleItem
	{
		ModuleItem.Other {}
	}

	map syntax Rules.view_item.view_item0 -> ModuleItem 
	{
		Use_item 
	}

	map syntax Rules.use_item  -> ModuleItem.UseItem = AstUtils.ConvertUsePath(View_path.GetAst());

	map syntax Rules.view_item.view_item2 -> ModuleItem
	{
		// EXTERN CRATE Name (AS Name)? ';'
		match (NameOpt)
		{
			| Some((_, name)) -> ModuleItem.ExternCrateWithAlias { name -> Alias; Name -> Crate;}
			| None			  -> ModuleItem.ExternCrate { Name -> Crate; }
		}	
	}
	
	
}
