using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Declarations;
using Nitra;

namespace VisualRust.Grammar
{

	ast Crate
	{
		out ContainingTable : TableScope = TableScope("Global", null);

		Attributes : Attribute*;
	}

	map syntax Rules.crate -> Crate
	{
		Inner_attrs -> Attributes;
	}

	abstract ast Attribute
	{
		| Empty
		| NotEmpty
		{
			MetaItem : MetaItemAst;
		}
	}

	map syntax Rules.inner_attr -> Attribute
	{
		| inner_attr0 -> Attribute.NotEmpty 
		{
			Meta_item -> MetaItem;
		}
		| inner_attr1 -> Attribute.Empty {}
	}

	map syntax Rules.outer_attr -> Attribute
	{
		| outer_attr0 -> Attribute.NotEmpty 
		{
			Meta_item -> MetaItem;
		}
		| outer_attr1 -> Attribute.Empty {}
	}

	abstract ast MetaItemAst
	{
		| MetaWord
		| MetaNameValue	  
		| MetaList { MetaItems : MetaItemAst*; }
	}

	map syntax Rules.meta_item -> MetaItemAst
	{
		| meta_item0 -> MetaWord {}
		| meta_item1 -> MetaNameValue {}
		| meta_item2 -> MetaList { Meta_items.Item1 -> MetaItems; }
	}

	ast AttrsAndVisibility
	{
		Attributes : Attribute*;

		IsVisible : bool;
	}

	map syntax Rules.attrs_and_vis -> AttrsAndVisibility
	{ 
		Outer_attrs -> Attributes;
		
		IsVisible = ParsedValue(Visibility.Span, Visibility.PUBOpt.HasValue);
	}




}
