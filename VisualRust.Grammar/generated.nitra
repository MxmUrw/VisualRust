using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nitra.Core;

namespace VisualRust.Grammar
{
	using Tokens;
	using Identifiers;
	using RustComments;

	syntax module Rules
	{
		alias abi	= str;
		alias ident = IDENT;

		[StartRule]
		syntax crate = SHEBANG_LINE? inner_attr* mod_item*;

		syntax inner_attr
		{
			| inner_attr0 = SHEBANG '[' meta_item ']'
			| inner_attr1 = INNER_DOC_COMMENT
		}

		syntax outer_attr
		{
			| outer_attr0 = '#' '[' meta_item ']'
			| outer_attr1 = OUTER_DOC_COMMENT
		}

		syntax meta_item
		{
			| meta_item0 = Name
			| meta_item1 = Name '=' lit
			| meta_item2 = ident '(' (meta_item;',')* ','? ')'
		}

		syntax attrs_and_vis = outer_attr* PUB?;

		syntax mod_item = attrs_and_vis item;

		syntax item
		{
			| item0 = stmt_item
			| item1 = item_macro
		}

		syntax stmt_item
		{
			| stmt_item0 = item_static
			| stmt_item1 = item_const
			| stmt_item2 = item_type
			| stmt_item3 = block_item
			| stmt_item4 = view_item
		}

		syntax item_static = STATIC MUT? ident ':' ty '=' expr ';';

		syntax item_const = CONST ident ':' ty '=' expr ';';

		syntax item_macro
		{
			| item_macro0 = path_expr '!' ident? parens_delimited_token_trees ';'
			| item_macro1 = path_expr '!' ident? braces_delimited_token_trees
			| item_macro2 = path_expr '!' ident? brackets_delimited_token_trees ';'
		}

		syntax view_item
		{
			| view_item0 = use_item
			| view_item1 = extern_fn_item
			| view_item2 = EXTERN CRATE ident ';'
			| view_item3 = EXTERN CRATE ident AS ident ';'
		}

		syntax extern_fn_item = EXTERN abi? item_fn;

		syntax use_item = USE view_path ';';

		syntax view_path
		{
			| view_path0 = path_no_types_allowed
			| view_path1 = path_no_types_allowed MOD_SEP '{' '}'
			| view_path2 = MOD_SEP '{' '}'
			| view_path3 = path_no_types_allowed MOD_SEP '{' idents_or_self '}'
			| view_path4 = MOD_SEP '{' idents_or_self '}'
			| view_path5 = path_no_types_allowed MOD_SEP '{' idents_or_self ',' '}'
			| view_path6 = MOD_SEP '{' idents_or_self ',' '}'
			| view_path7 = path_no_types_allowed MOD_SEP '*'
			| view_path8 = '{' '}'
			| view_path9 = '{' idents_or_self '}'
			| view_path10 = '{' idents_or_self ',' '}'
			| view_path11 = path_no_types_allowed AS ident
		}

		syntax block_item
		{
			| block_item0 = item_fn
			| block_item1 = item_unsafe_fn
			| block_item2 = item_mod
			| block_item3 = item_foreign_mod
			| block_item4 = item_struct
			| block_item5 = item_enum
			| block_item6 = item_trait
			| block_item7 = item_impl
		}

		syntax maybe_ty_ascription = (':' ty_sum)?;

		syntax maybe_init_expr = ('=' expr)?;

		syntax item_struct
		{
			| item_struct0 = STRUCT ident generic_params? where_clause? struct_decl_args
			| item_struct1 = STRUCT ident generic_params? struct_tuple_args where_clause? ';'
			| item_struct2 = STRUCT ident generic_params? where_clause? ';'
		}

		syntax struct_decl_args = '{' struct_decl_fields ','? '}';

		syntax struct_tuple_args = '(' struct_tuple_fields ','? ')';

		syntax struct_decl_fields = (struct_decl_field;',')*;

		syntax struct_decl_field = attrs_and_vis ident ':' ty_sum;

		syntax struct_tuple_fields = (struct_tuple_field;',')+;

		syntax struct_tuple_field = attrs_and_vis ty_sum;

		syntax item_enum = ENUM ident generic_params? where_clause? '{' enum_defs ','? '}';

		syntax enum_defs = (enum_def;',')*;

		syntax enum_def = attrs_and_vis ident enum_args?;

		syntax enum_args
		{
			| enum_args0 = '{' struct_decl_fields '}'
			| enum_args1 = '{' struct_decl_fields ',' '}'
			| enum_args2 = '(' maybe_ty_sums ')'
			| enum_args3 = '=' expr
		}

		syntax item_mod
		{
			| item_mod0 = MOD ident ';'
			| item_mod1 = MOD ident '{' mod_item* '}'
			| item_mod2 = MOD ident '{' inner_attr+ mod_item* '}'
		}

		syntax item_foreign_mod = EXTERN abi? '{' inner_attr* foreign_item* '}';

		syntax foreign_item
		{
			| foreign_item0 = attrs_and_vis STATIC item_foreign_static
			| foreign_item1 = attrs_and_vis item_foreign_fn
			| foreign_item2 = attrs_and_vis UNSAFE item_foreign_fn
		}

		syntax item_foreign_static = MUT? ident ':' ty ';';

		syntax item_foreign_fn = FN ident generic_params? fn_decl_allow_variadic where_clause? ';';

		syntax fn_decl_allow_variadic = fn_params_allow_variadic ret_ty?;

		syntax fn_params_allow_variadic
		{
			| fn_params_allow_variadic0 = '(' ')'
			| fn_params_allow_variadic1 = '(' params ')'
			| fn_params_allow_variadic2 = '(' params ',' ')'
			| fn_params_allow_variadic3 = '(' params ',' DOTDOTDOT ')'
		}

		syntax idents_or_self = (ident_or_self (AS ident)?; ',')*;

		syntax ident_or_self
		{
			| ident_or_self0 = ident
			| ident_or_self1 = SELF
		}

		syntax item_type = TYPE ident generic_params? where_clause? '=' ty_sum ';';

		syntax for_sized
		{
			| for_sized0 = FOR '?' ident
			| for_sized1 = FOR ident '?'
		}

		syntax item_trait = UNSAFE? TRAIT ident generic_params? for_sized? maybe_ty_param_bounds where_clause? '{' trait_item* '}';

		syntax trait_item
		{
			| trait_item0 = trait_const
			| trait_item1 = trait_type
			| trait_item2 = trait_method
		}

		syntax trait_const = outer_attr* CONST ident maybe_ty_ascription maybe_const_default ';';

		syntax maybe_const_default = ('=' expr)?;

		syntax trait_type = outer_attr* TYPE ty_param ';';

		syntax trait_method
		{
			| trait_method0 = type_method
			| trait_method1 = method
		}

		syntax type_method = attrs_and_vis UNSAFE? (EXTERN abi?)? FN ident generic_params? fn_decl_with_self_allow_anon_params where_clause? ';';

		syntax method = attrs_and_vis UNSAFE? (EXTERN abi?)? FN ident generic_params? fn_decl_with_self_allow_anon_params where_clause? inner_attrs_and_block;

		syntax impl_method = attrs_and_vis DEFAULT? UNSAFE? (EXTERN abi?)? FN ident generic_params? fn_decl_with_self where_clause? inner_attrs_and_block;

		syntax item_impl
		{
			| item_impl0 = UNSAFE? IMPL generic_params? ty_prim_sum where_clause? '{' inner_attr* impl_item* '}'
			| item_impl1 = UNSAFE? IMPL generic_params? '(' ty ')' where_clause? '{' inner_attr* impl_item* '}'
			| item_impl2 = UNSAFE? IMPL generic_params? trait_ref FOR ty_sum where_clause? '{' inner_attr* impl_item* '}'
			| item_impl3 = UNSAFE? IMPL generic_params? '!' trait_ref FOR ty_sum where_clause? '{' inner_attr* impl_item* '}'
			| item_impl4 = UNSAFE? IMPL generic_params? trait_ref FOR DOTDOT '{' '}'
			| item_impl5 = UNSAFE? IMPL generic_params? '!' trait_ref FOR DOTDOT '{' '}'
		}

		syntax impl_item
		{
			| impl_item0 = impl_method
			| impl_item1 = attrs_and_vis item_macro
			| impl_item2 = impl_const
			| impl_item3 = impl_type
		}

		syntax impl_const = attrs_and_vis item_const;

		syntax impl_type = attrs_and_vis TYPE ident generic_params? '=' ty_sum ';';

		syntax item_fn = FN ident generic_params? fn_decl where_clause? inner_attrs_and_block;

		syntax item_unsafe_fn = UNSAFE (EXTERN abi?)? FN ident generic_params? fn_decl where_clause? inner_attrs_and_block;

		syntax fn_decl = fn_params ret_ty?;

		syntax fn_decl_with_self = fn_params_with_self ret_ty?;

		syntax fn_decl_with_self_allow_anon_params = fn_anon_params_with_self ret_ty?;

		syntax fn_params = '(' maybe_params ')';

		syntax fn_anon_params = '(' (anon_param anon_params_allow_variadic_tail?)? ')';

		syntax fn_params_with_self
		{
			| fn_params_with_self0 = '(' MUT? SELF maybe_ty_ascription comma_params? ')'
			| fn_params_with_self1 = '(' '&' MUT? SELF maybe_ty_ascription comma_params? ')'
			| fn_params_with_self2 = '(' '&' lifetime MUT? SELF maybe_ty_ascription comma_params? ')'
			| fn_params_with_self3 = '(' maybe_params ')'
		}

		syntax fn_anon_params_with_self
		{
			| fn_anon_params_with_self0 = '(' MUT? SELF maybe_ty_ascription comma_anon_params? ')'
			| fn_anon_params_with_self1 = '(' '&' MUT? SELF maybe_ty_ascription comma_anon_params? ')'
			| fn_anon_params_with_self2 = '(' '&' lifetime MUT? SELF maybe_ty_ascription comma_anon_params? ')'
			| fn_anon_params_with_self3 = '(' maybe_anon_params ')'
		}

		syntax maybe_params = (params ','?)?;

		syntax params = (param;',')+;

		syntax param = pat ':' ty_sum;

		syntax inferrable_params = (inferrable_param;',')+;

		syntax inferrable_param = pat maybe_ty_ascription;

		syntax maybe_unboxed_closure_kind = (('&' MUT?)? ':')?;

		syntax comma_params
		{
			| comma_params0 = ','
			| comma_params1 = ',' params ','?
		}

		syntax comma_anon_params
		{
			| comma_anon_params0 = ','
			| comma_anon_params1 = ',' anon_params ','?
		}

		syntax maybe_anon_params = (anon_params ','?)?;

		syntax anon_params = (anon_param;',')+;

		syntax anon_param = (named_arg ':')? ty;

		syntax anon_params_allow_variadic_tail
		{
			| anon_params_allow_variadic_tail0 = ',' DOTDOTDOT
			| anon_params_allow_variadic_tail1 = ',' anon_param anon_params_allow_variadic_tail?
		}

		syntax named_arg
		{
			| named_arg0 = ident
			| named_arg1 = UNDERSCORE
			| named_arg2 = '&' ident
			| named_arg3 = '&' UNDERSCORE
			| named_arg4 = ANDAND ident
			| named_arg5 = ANDAND UNDERSCORE
			| named_arg6 = MUT ident
		}

		syntax ret_ty
		{
			| ret_ty0 = RARROW '!'
			| ret_ty1 = RARROW ty
		}

		syntax generic_params
		{
			| generic_params0 = '<' lifetimes '>'
			| generic_params1 = '<' lifetimes ',' '>'
			| generic_params2 = '<' lifetimes SHR
			| generic_params3 = '<' lifetimes ',' SHR
			| generic_params4 = '<' lifetimes ',' ty_params '>'
			| generic_params5 = '<' lifetimes ',' ty_params ',' '>'
			| generic_params6 = '<' lifetimes ',' ty_params SHR
			| generic_params7 = '<' lifetimes ',' ty_params ',' SHR
			| generic_params8 = '<' ty_params '>'
			| generic_params9 = '<' ty_params ',' '>'
			| generic_params10 = '<' ty_params SHR
			| generic_params11 = '<' ty_params ',' SHR
		}

		syntax where_clause = WHERE where_predicates ','?;

		syntax where_predicates = (where_predicate;',')+;

		syntax where_predicate
		{
			| where_predicate0 = maybe_for_lifetimes lifetime ':' bounds
			| where_predicate1 = maybe_for_lifetimes ty ':' ty_param_bounds
		}

		syntax maybe_for_lifetimes = (FOR '<' lifetimes '>')?;

		syntax ty_params = (ty_param;',')+;

		syntax path_no_types_allowed = heads (MOD_SEP ident)*
		{
			syntax heads
			{
				| heads0 = ident
				| heads1 = MOD_SEP ident
				| heads2 = SELF
				| heads3 = MOD_SEP SELF
				| heads4 = SUPER
			}
		}

		syntax path_generic_args_without_colons = heads tails*
		{
			syntax heads
			{
				| heads0 = ident
				| heads1 = ident generic_args
				| heads2 = ident '(' maybe_ty_sums ')' ret_ty?
			}
			syntax tails
			{
				| tails0 = MOD_SEP ident
				| tails1 = MOD_SEP ident generic_args
				| tails2 = MOD_SEP ident '(' maybe_ty_sums ')' ret_ty?
			}
		}

		syntax generic_args
		{
			| generic_args0 = '<' generic_values '>'
/*			| generic_args1 = '<' generic_values SHR
			| generic_args2 = '<' generic_values GE
			| generic_args3 = '<' generic_values SHREQ */
			| generic_args4 = SHL ty_qualified_path_and_generic_values '>'
/*			| generic_args5 = SHL ty_qualified_path_and_generic_values SHR
			| generic_args6 = SHL ty_qualified_path_and_generic_values GE
			| generic_args7 = SHL ty_qualified_path_and_generic_values SHREQ */
		}

		syntax generic_values = maybe_lifetimes ty_sums_and_or_bindings?;

		syntax ty_sums_and_or_bindings
		{
			| ty_sums_and_or_bindings0 = ty_sums
			| ty_sums_and_or_bindings2 = ty_sums ',' bindings?
			| ty_sums_and_or_bindings4 = bindings ','?
		}

		syntax maybe_bindings = (',' bindings)?;

		syntax pat
		{
			| pat0 = UNDERSCORE
			| pat1 = '&' pat
			| pat2 = '&' MUT pat
			| pat3 = ANDAND pat
			| pat4 = '(' ')'
			| pat5 = '(' pat_tup ')'
			| pat6 = '(' pat_tup ',' ')'
			| pat7 = '[' pat_vec? ']'
			| pat8 = lit_or_path
			| pat9 = lit_or_path DOTDOTDOT lit_or_path
			| pat10 = path_expr '{' pat_struct '}'
			| pat11 = path_expr '(' DOTDOT ')'
			| pat12 = path_expr '(' pat_tup ')'
			| pat13 = path_expr '!' ident? delimited_token_trees
			| pat14 = binding_mode ident
			| pat15 = ident '@' pat
			| pat16 = binding_mode ident '@' pat
			| pat17 = BOX pat
			| pat18 = '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident
			| pat19 = SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident
		}

		syntax pats_or = (pat;'|')+;

		syntax binding_mode
		{
			| binding_mode0 = REF
			| binding_mode1 = REF MUT
			| binding_mode2 = MUT
		}

		syntax lit_or_path
		{
			| lit_or_path0 = path_expr
			| lit_or_path1 = lit
			| lit_or_path2 = '-' lit
		}

		syntax pat_field
		{
			| pat_field0 = ident
			| pat_field1 = binding_mode ident
			| pat_field2 = BOX ident
			| pat_field3 = BOX binding_mode ident
			| pat_field4 = ident ':' pat
			| pat_field5 = binding_mode ident ':' pat
		}

		syntax pat_fields = (pat_field;',')+;

		syntax pat_struct
		{
			| pat_struct0 = pat_fields
			| pat_struct1 = pat_fields ','
			| pat_struct2 = pat_fields ',' DOTDOT
			| pat_struct3 = DOTDOT
		}

		syntax pat_tup = (pat;',')+;

		syntax pat_vec
		{
			| pat_vec0 = pat_vec_elts
			| pat_vec1 = pat_vec_elts ','
			| pat_vec2 = pat_vec_elts DOTDOT
			| pat_vec3 = pat_vec_elts ',' DOTDOT
			| pat_vec4 = pat_vec_elts DOTDOT ',' pat_vec_elts
			| pat_vec5 = pat_vec_elts DOTDOT ',' pat_vec_elts ','
			| pat_vec6 = pat_vec_elts ',' DOTDOT ',' pat_vec_elts
			| pat_vec7 = pat_vec_elts ',' DOTDOT ',' pat_vec_elts ','
			| pat_vec8 = DOTDOT ',' pat_vec_elts
			| pat_vec9 = DOTDOT ',' pat_vec_elts ','
			| pat_vec10 = DOTDOT
		}

		syntax pat_vec_elts = (pat;',')+;

		syntax ty
		{
			| ty0 = ty_prim
			| ty1 = ty_closure
			| ty2 = '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident
			| ty3 = SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident
			| ty4 = '(' ty_sums ')'
			| ty5 = '(' ty_sums ',' ')'
			| ty6 = '(' ')'
		}

		syntax ty_prim
		{
			| ty_prim0 = path_generic_args_without_colons
			| ty_prim1 = MOD_SEP path_generic_args_without_colons
			| ty_prim2 = SELF MOD_SEP path_generic_args_without_colons
			| ty_prim3 = BOX ty
			| ty_prim4 = '*' mut_or_const? ty
			| ty_prim5 = '&' ty
			| ty_prim6 = '&' MUT ty
			| ty_prim7 = ANDAND ty
			| ty_prim8 = ANDAND MUT ty
			| ty_prim9 = '&' lifetime MUT? ty
			| ty_prim10 = ANDAND lifetime MUT? ty
			| ty_prim11 = '[' ty ']'
			| ty_prim12 = '[' ty ',' DOTDOT expr ']'
			| ty_prim13 = '[' ty ';' expr ']'
			| ty_prim14 = TYPEOF '(' expr ')'
			| ty_prim15 = UNDERSCORE
			| ty_prim16 = ty_bare_fn
			| ty_prim17 = ty_proc
			| ty_prim18 = for_in_type
		}

		syntax ty_bare_fn
		{
			| ty_bare_fn0 = FN ty_fn_decl
			| ty_bare_fn1 = UNSAFE FN ty_fn_decl
			| ty_bare_fn2 = EXTERN abi? FN ty_fn_decl
			| ty_bare_fn3 = UNSAFE EXTERN abi? FN ty_fn_decl
		}

		syntax ty_fn_decl = generic_params? fn_anon_params ret_ty?;

		syntax ty_closure
		{
			| ty_closure0 = UNSAFE '|' anon_params '|' maybe_bounds ret_ty?
			| ty_closure1 = '|' anon_params '|' maybe_bounds ret_ty?
			| ty_closure2 = UNSAFE OROR maybe_bounds ret_ty?
			| ty_closure3 = OROR maybe_bounds ret_ty?
		}

		syntax ty_proc = PROC generic_params? fn_params maybe_bounds ret_ty?;

		syntax for_in_type = FOR '<' maybe_lifetimes '>' for_in_type_suffix;

		syntax for_in_type_suffix
		{
			| for_in_type_suffix0 = ty_proc
			| for_in_type_suffix1 = ty_bare_fn
			| for_in_type_suffix2 = trait_ref
			| for_in_type_suffix3 = ty_closure
		}

		syntax mut_or_const
		{
			| mut_or_const0 = MUT
			| mut_or_const1 = CONST
		}

		syntax ty_qualified_path_and_generic_values = ty_qualified_path (',' ty_sums)? maybe_bindings;

		syntax ty_qualified_path = ty_sum AS trait_ref '>' MOD_SEP ident ('+' ty_param_bounds)?;

		syntax maybe_ty_sums = (ty_sums ','?)?;

		syntax ty_sums = (ty_sum;',')+;

		syntax ty_sum = ty ('+' ty_param_bounds)?;

		syntax ty_prim_sum = ty_prim ('+' ty_param_bounds)?;

		syntax maybe_ty_param_bounds = (':' ty_param_bounds)?;

		syntax ty_param_bounds = boundseq?;

		syntax boundseq = (polybound;'+')+;

		syntax polybound
		{
			| polybound0 = FOR '<' maybe_lifetimes '>' bound
			| polybound1 = bound
			| polybound2 = '?' bound
		}

		syntax bindings = (binding;',')+;

		syntax binding = ident '=' ty;

		syntax ty_param = ident ('?' ident)? maybe_ty_param_bounds maybe_ty_default;

		syntax maybe_bounds = (':' bounds)?;

		syntax bounds = (bound;'+')+;

		syntax bound
		{
			| bound0 = lifetime
			| bound1 = trait_ref
		}

		syntax maybe_ltbounds = (':' ltbounds)?;

		syntax ltbounds = (lifetime;'+')+;

		syntax maybe_ty_default = ('=' ty_sum)?;

		syntax maybe_lifetimes = (lifetimes ','?)?;

		syntax lifetimes = (lifetime_and_bounds;',')+;

		syntax lifetime_and_bounds
		{
			| lifetime_and_bounds0 = LIFETIME maybe_ltbounds
			| lifetime_and_bounds1 = STATIC_LIFETIME
		}

		syntax lifetime
		{
			| lifetime0 = LIFETIME
			| lifetime1 = STATIC_LIFETIME
		}

		syntax trait_ref = MOD_SEP? path_generic_args_without_colons;

		syntax inner_attrs_and_block = '{' inner_attr* stmts? '}';

		syntax block = '{' stmts? '}';

		syntax stmts
		{
			| stmts0 = stmt+ nonblock_expr?
			| stmts1 = nonblock_expr
		}

		syntax stmt
		{
			| stmt0 = let
			| stmt1 = stmt_item
			| stmt2 = PUB stmt_item
			| stmt3 = outer_attr+ stmt_item
			| stmt4 = outer_attr+ PUB stmt_item
			| stmt5 = full_block_expr
			| stmt6 = block
			| stmt7 = nonblock_expr ';'
			| stmt8 = ';'
		}

		syntax maybe_exprs = (exprs ','?)?;

		syntax exprs = (expr;',')+;

		syntax path_expr
		{
			| path_expr0 = path_generic_args_with_colons
			| path_expr1 = MOD_SEP path_generic_args_with_colons
			| path_expr2 = SELF MOD_SEP path_generic_args_with_colons
			| path_expr3 = SUPER MOD_SEP path_generic_args_with_colons
		}

		syntax path_generic_args_with_colons = ident tails*
		{
			syntax tails
			{
				| tails0 = MOD_SEP ident
				| tails1 = MOD_SEP generic_args
			}
		}

		syntax macro_expr
		{
			| macro_expr0 = path_expr '!' ident? parens_delimited_token_trees
			| macro_expr1 = path_expr '!' ident? brackets_delimited_token_trees
		}

		syntax nonblock_expr = heads tails* 
		{
			syntax heads
			{
				| heads0 = lit
				| heads1 = path_expr
				| heads2 = SELF
				| heads3 = macro_expr
				| heads4 = path_expr '{' struct_expr_fields '}'
				| heads5 = '[' vec_expr ']'
				| heads6 = '(' maybe_exprs ')'
				| heads7 = CONTINUE
				| heads8 = CONTINUE lifetime
				| heads9 = RETURN
				| heads10 = RETURN expr
				| heads11 = BREAK
				| heads12 = BREAK lifetime
				| heads13 = DOTDOT expr
				| heads14 = DOTDOT
				| heads15 = BOX nonparen_expr
				| heads16 = BOX '(' expr? ')' nonblock_expr
				| heads17 = expr_qualified_path
				| heads18 = nonblock_prefix_expr
			}
			syntax tails
			{
				| tails0 = '.' path_generic_args_with_colons
				| tails1 = '.' LIT_INTEGER
				| tails2 = '[' expr? ']'
				| tails3 = '(' maybe_exprs ')'
				| tails4 = LARROW expr
				| tails5 = '=' expr
				| tails6 = SHLEQ expr
				| tails7 = SHREQ expr
				| tails8 = MINUSEQ expr
				| tails9 = ANDEQ expr
				| tails10 = OREQ expr
				| tails11 = PLUSEQ expr
				| tails12 = STAREQ expr
				| tails13 = SLASHEQ expr
				| tails14 = CARETEQ expr
				| tails15 = PERCENTEQ expr
				| tails16 = OROR expr
				| tails17 = ANDAND expr
				| tails18 = EQEQ expr
				| tails19 = NE expr
				| tails20 = '<' expr
				| tails21 = '>' expr
				| tails22 = LE expr
				| tails23 = GE expr
				| tails24 = '|' expr
				| tails25 = '^' expr
				| tails26 = '&' expr
				| tails27 = SHL expr
				| tails28 = SHR expr
				| tails29 = '+' expr
				| tails30 = '-' expr
				| tails31 = '*' expr
				| tails32 = '/' expr
				| tails33 = '%' expr
				| tails34 = DOTDOT
				| tails35 = DOTDOT expr
				| tails36 = AS ty
				| tails37 = '?'
			}
		}

		syntax expr = heads tails* 
		{
			syntax heads
			{
				| heads0 = lit
				| heads1 = path_expr
				| heads2 = SELF
				| heads3 = macro_expr
				| heads4 = path_expr '{' struct_expr_fields? '}'
				| heads5 = '(' maybe_exprs ')'
				| heads6 = '[' vec_expr ']'
				| heads7 = CONTINUE
				| heads8 = CONTINUE ident
				| heads9 = RETURN
				| heads10 = RETURN expr
				| heads11 = BREAK
				| heads12 = BREAK ident
				| heads13 = DOTDOT expr
				| heads14 = DOTDOT
				| heads15 = BOX nonparen_expr
				| heads16 = BOX '(' expr? ')' expr
				| heads17 = expr_qualified_path
				| heads18 = block_expr
				| heads19 = block
				| heads20 = nonblock_prefix_expr
			}
			syntax tails
			{
				| tails0 = '.' path_generic_args_with_colons
				| tails1 = '.' LIT_INTEGER
				| tails2 = '[' expr? ']'
				| tails3 = '(' maybe_exprs ')'
				| tails4 = LARROW expr
				| tails5 = '=' expr
				| tails6 = SHLEQ expr
				| tails7 = SHREQ expr
				| tails8 = MINUSEQ expr
				| tails9 = ANDEQ expr
				| tails10 = OREQ expr
				| tails11 = PLUSEQ expr
				| tails12 = STAREQ expr
				| tails13 = SLASHEQ expr
				| tails14 = CARETEQ expr
				| tails15 = PERCENTEQ expr
				| tails16 = OROR expr
				| tails17 = ANDAND expr
				| tails18 = EQEQ expr
				| tails19 = NE expr
				| tails20 = '<' expr
				| tails21 = '>' expr
				| tails22 = LE expr
				| tails23 = GE expr
				| tails24 = '|' expr
				| tails25 = '^' expr
				| tails26 = '&' expr
				| tails27 = SHL expr
				| tails28 = SHR expr
				| tails29 = '+' expr
				| tails30 = '-' expr
				| tails31 = '*' expr
				| tails32 = '/' expr
				| tails33 = '%' expr
				| tails34 = DOTDOT
				| tails35 = DOTDOT expr
				| tails36 = AS ty
				| tails37 = '?'
			}
		}

		syntax nonparen_expr = heads tails*
		{
			syntax heads
			{
				| heads0 = lit
				| heads1 = path_expr
				| heads2 = SELF
				| heads3 = macro_expr
				| heads4 = path_expr '{' struct_expr_fields '}'
				| heads5 = '[' vec_expr ']'
				| heads6 = CONTINUE
				| heads7 = CONTINUE ident
				| heads8 = RETURN
				| heads9 = RETURN expr
				| heads10 = BREAK
				| heads11 = BREAK ident
				| heads12 = DOTDOT nonparen_expr
				| heads13 = DOTDOT
				| heads14 = BOX nonparen_expr
				| heads15 = BOX '(' expr? ')' expr
				| heads16 = expr_qualified_path
				| heads17 = block_expr
				| heads18 = block
				| heads19 = nonblock_prefix_expr
			}
			syntax tails
			{
				| tails0 = '.' path_generic_args_with_colons
				| tails1 = '.' LIT_INTEGER
				| tails2 = '[' expr? ']'
				| tails3 = '(' maybe_exprs ')'
				| tails4 = LARROW nonparen_expr
				| tails5 = '=' nonparen_expr
				| tails6 = SHLEQ nonparen_expr
				| tails7 = SHREQ nonparen_expr
				| tails8 = MINUSEQ nonparen_expr
				| tails9 = ANDEQ nonparen_expr
				| tails10 = OREQ nonparen_expr
				| tails11 = PLUSEQ nonparen_expr
				| tails12 = STAREQ nonparen_expr
				| tails13 = SLASHEQ nonparen_expr
				| tails14 = CARETEQ nonparen_expr
				| tails15 = PERCENTEQ nonparen_expr
				| tails16 = OROR nonparen_expr
				| tails17 = ANDAND nonparen_expr
				| tails18 = EQEQ nonparen_expr
				| tails19 = NE nonparen_expr
				| tails20 = '<' nonparen_expr
				| tails21 = '>' nonparen_expr
				| tails22 = LE nonparen_expr
				| tails23 = GE nonparen_expr
				| tails24 = '|' nonparen_expr
				| tails25 = '^' nonparen_expr
				| tails26 = '&' nonparen_expr
				| tails27 = SHL nonparen_expr
				| tails28 = SHR nonparen_expr
				| tails29 = '+' nonparen_expr
				| tails30 = '-' nonparen_expr
				| tails31 = '*' nonparen_expr
				| tails32 = '/' nonparen_expr
				| tails33 = '%' nonparen_expr
				| tails34 = DOTDOT
				| tails35 = DOTDOT nonparen_expr
				| tails36 = AS ty
				| tails37 = '?'
			}
		}

		syntax expr_nostruct = heads tails* 
		{
			syntax heads
			{
				| heads0 = lit
				| heads1 = path_expr
				| heads2 = SELF
				| heads3 = macro_expr
				| heads4 = '[' vec_expr ']'
				| heads5 = '(' maybe_exprs ')'
				| heads6 = CONTINUE
				| heads7 = CONTINUE ident
				| heads8 = RETURN
				| heads9 = RETURN expr
				| heads10 = BREAK
				| heads11 = BREAK ident
				| heads12 = DOTDOT expr_nostruct
				| heads13 = DOTDOT
				| heads14 = BOX nonparen_expr
				| heads15 = BOX '(' expr? ')' expr_nostruct
				| heads16 = expr_qualified_path
				| heads17 = block_expr
				| heads18 = block
				| heads19 = nonblock_prefix_expr_nostruct
			}
			syntax tails
			{
				| tails0 = '.' path_generic_args_with_colons
				| tails1 = '.' LIT_INTEGER
				| tails2 = '[' expr? ']'
				| tails3 = '(' maybe_exprs ')'
				| tails4 = LARROW expr_nostruct
				| tails5 = '=' expr_nostruct
				| tails6 = SHLEQ expr_nostruct
				| tails7 = SHREQ expr_nostruct
				| tails8 = MINUSEQ expr_nostruct
				| tails9 = ANDEQ expr_nostruct
				| tails10 = OREQ expr_nostruct
				| tails11 = PLUSEQ expr_nostruct
				| tails12 = STAREQ expr_nostruct
				| tails13 = SLASHEQ expr_nostruct
				| tails14 = CARETEQ expr_nostruct
				| tails15 = PERCENTEQ expr_nostruct
				| tails16 = OROR expr_nostruct
				| tails17 = ANDAND expr_nostruct
				| tails18 = EQEQ expr_nostruct
				| tails19 = NE expr_nostruct
				| tails20 = '<' expr_nostruct
				| tails21 = '>' expr_nostruct
				| tails22 = LE expr_nostruct
				| tails23 = GE expr_nostruct
				| tails24 = '|' expr_nostruct
				| tails25 = '^' expr_nostruct
				| tails26 = '&' expr_nostruct
				| tails27 = SHL expr_nostruct
				| tails28 = SHR expr_nostruct
				| tails29 = '+' expr_nostruct
				| tails30 = '-' expr_nostruct
				| tails31 = '*' expr_nostruct
				| tails32 = '/' expr_nostruct
				| tails33 = '%' expr_nostruct
				| tails34 = DOTDOT
				| tails35 = DOTDOT expr_nostruct
				| tails36 = AS ty
				| tails37 = '?'
			}
		}

		syntax nonblock_prefix_expr_nostruct
		{
			| nonblock_prefix_expr_nostruct0 = '-' expr_nostruct
			| nonblock_prefix_expr_nostruct1 = '!' expr_nostruct
			| nonblock_prefix_expr_nostruct2 = '*' expr_nostruct
			| nonblock_prefix_expr_nostruct3 = '&' MUT? expr_nostruct
			| nonblock_prefix_expr_nostruct4 = ANDAND MUT? expr_nostruct
			| nonblock_prefix_expr_nostruct5 = lambda_expr_nostruct
			| nonblock_prefix_expr_nostruct6 = MOVE lambda_expr_nostruct
			| nonblock_prefix_expr_nostruct7 = proc_expr_nostruct
		}

		syntax nonblock_prefix_expr
		{
			| nonblock_prefix_expr0 = '-' expr
			| nonblock_prefix_expr1 = '!' expr
			| nonblock_prefix_expr2 = '*' expr
			| nonblock_prefix_expr3 = '&' MUT? expr
			| nonblock_prefix_expr4 = ANDAND MUT? expr
			| nonblock_prefix_expr5 = lambda_expr
			| nonblock_prefix_expr6 = MOVE lambda_expr
			| nonblock_prefix_expr7 = proc_expr
		}

		syntax expr_qualified_path
		{
			| expr_qualified_path0 = '<' ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_qpath_params
			| expr_qualified_path1 = SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident
			| expr_qualified_path2 = SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args maybe_as_trait_ref '>' MOD_SEP ident
			| expr_qualified_path3 = SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident maybe_as_trait_ref '>' MOD_SEP ident generic_args
			| expr_qualified_path4 = SHL ty_sum maybe_as_trait_ref '>' MOD_SEP ident generic_args maybe_as_trait_ref '>' MOD_SEP ident generic_args
		}

		syntax maybe_qpath_params = (MOD_SEP generic_args)?;

		syntax maybe_as_trait_ref = (AS trait_ref)?;

		syntax lambda_expr
		{
			| lambda_expr0 = OROR ret_ty? expr
			| lambda_expr1 = '|' maybe_unboxed_closure_kind '|' ret_ty? expr
			| lambda_expr2 = '|' inferrable_params '|' ret_ty? expr
			| lambda_expr3 = '|' '&' MUT? ':' inferrable_params '|' ret_ty? expr
			| lambda_expr4 = '|' ':' inferrable_params '|' ret_ty? expr
		}

		syntax lambda_expr_nostruct
		{
			| lambda_expr_nostruct0 = OROR expr_nostruct
			| lambda_expr_nostruct1 = '|' maybe_unboxed_closure_kind '|' expr_nostruct
			| lambda_expr_nostruct2 = '|' inferrable_params '|' expr_nostruct
			| lambda_expr_nostruct3 = '|' '&' MUT? ':' inferrable_params '|' expr_nostruct
			| lambda_expr_nostruct4 = '|' ':' inferrable_params '|' expr_nostruct
		}

		syntax proc_expr = PROC '(' inferrable_params? ')' expr;

		syntax proc_expr_nostruct = PROC '(' inferrable_params? ')' expr_nostruct;

		syntax vec_expr
		{
			| vec_expr0 = maybe_exprs
			| vec_expr1 = exprs ';' expr
		}

		syntax struct_expr_fields
		{
			| struct_expr_fields0 = field_inits
			| struct_expr_fields1 = field_inits ','
			| struct_expr_fields2 = maybe_field_inits default_field_init
		}

		syntax maybe_field_inits = (field_inits ','?)?;

		syntax field_inits = (field_init;',')+;

		syntax field_init = ident ':' expr;

		syntax default_field_init = DOTDOT expr;

		syntax block_expr
		{
			| block_expr0 = expr_match
			| block_expr1 = expr_if
			| block_expr2 = expr_if_let
			| block_expr3 = expr_while
			| block_expr4 = expr_while_let
			| block_expr5 = expr_loop
			| block_expr6 = expr_for
			| block_expr7 = UNSAFE block
			| block_expr8 = path_expr '!' ident? braces_delimited_token_trees
		}

		syntax full_block_expr = block_expr tails*
		{
			syntax tails
			{
				| tails0 = '.' path_generic_args_with_colons
				| tails1 = '.' path_generic_args_with_colons '[' expr? ']'
				| tails2 = '.' path_generic_args_with_colons '(' maybe_exprs ')'
				| tails3 = '.' LIT_INTEGER
			}
		}

		syntax expr_match
		{
			| expr_match0 = MATCH expr_nostruct '{' '}'
			| expr_match1 = MATCH expr_nostruct '{' match_clause+ '}'
			| expr_match2 = MATCH expr_nostruct '{' match_clause+ nonblock_match_clause '}'
			| expr_match3 = MATCH expr_nostruct '{' nonblock_match_clause '}'
		}

		syntax match_clause
		{
			| match_clause0 = nonblock_match_clause ','
			| match_clause1 = block_match_clause
			| match_clause2 = block_match_clause ','
		}

		syntax nonblock_match_clause
		{
			| nonblock_match_clause0 = outer_attr* pats_or maybe_guard FAT_ARROW nonblock_expr
			| nonblock_match_clause1 = outer_attr* pats_or maybe_guard FAT_ARROW full_block_expr
		}

		syntax block_match_clause = outer_attr* pats_or maybe_guard FAT_ARROW block;

		syntax maybe_guard = (IF expr_nostruct)?;

		syntax expr_if = IF expr_nostruct block (ELSE block_or_if)?;

		syntax expr_if_let = IF LET pat '=' expr_nostruct block (ELSE block_or_if)?;

		syntax block_or_if
		{
			| block_or_if0 = block
			| block_or_if1 = expr_if
			| block_or_if2 = expr_if_let
		}

		syntax expr_while = maybe_label WHILE expr_nostruct block;

		syntax expr_while_let = maybe_label WHILE LET pat '=' expr_nostruct block;

		syntax expr_loop = maybe_label LOOP block;

		syntax expr_for = maybe_label FOR pat IN expr_nostruct block;

		syntax maybe_label = (lifetime ':')?;

		syntax let = LET pat maybe_ty_ascription maybe_init_expr ';';

		syntax lit
		{
			| lit0 = LIT_BYTE
			| lit1 = LIT_CHAR
			| lit2 = LIT_INTEGER
			| lit3 = LIT_FLOAT
			| lit4 = TRUE
			| lit5 = FALSE
			| lit6 = str
		}

		syntax str
		{
			| str0 = LIT_STR
			| str1 = LIT_STR_RAW
			| str2 = LIT_BYTE_STR
			| str3 = LIT_BYTE_STR_RAW
		}

		syntax unpaired_token
		{
			| unpaired_token0 = SHL
			| unpaired_token1 = SHR
			| unpaired_token2 = LE
			| unpaired_token3 = EQEQ
			| unpaired_token4 = NE
			| unpaired_token5 = GE
			| unpaired_token6 = ANDAND
			| unpaired_token7 = OROR
			| unpaired_token8 = LARROW
			| unpaired_token9 = SHLEQ
			| unpaired_token10 = SHREQ
			| unpaired_token11 = MINUSEQ
			| unpaired_token12 = ANDEQ
			| unpaired_token13 = OREQ
			| unpaired_token14 = PLUSEQ
			| unpaired_token15 = STAREQ
			| unpaired_token16 = SLASHEQ
			| unpaired_token17 = CARETEQ
			| unpaired_token18 = PERCENTEQ
			| unpaired_token19 = DOTDOT
			| unpaired_token20 = DOTDOTDOT
			| unpaired_token21 = MOD_SEP
			| unpaired_token22 = RARROW
			| unpaired_token23 = FAT_ARROW
			| unpaired_token24 = LIT_BYTE
			| unpaired_token25 = LIT_CHAR
			| unpaired_token26 = LIT_INTEGER
			| unpaired_token27 = LIT_FLOAT
			| unpaired_token28 = LIT_STR
			| unpaired_token29 = LIT_STR_RAW
			| unpaired_token30 = LIT_BYTE_STR
			| unpaired_token31 = LIT_BYTE_STR_RAW
			| unpaired_token32 = IDENT
			| unpaired_token33 = UNDERSCORE
			| unpaired_token34 = LIFETIME
			| unpaired_token35 = SELF
			| unpaired_token36 = STATIC
			| unpaired_token37 = AS
			| unpaired_token38 = BREAK
			| unpaired_token39 = CRATE
			| unpaired_token40 = ELSE
			| unpaired_token41 = ENUM
			| unpaired_token42 = EXTERN
			| unpaired_token43 = FALSE
			| unpaired_token44 = FN
			| unpaired_token45 = FOR
			| unpaired_token46 = IF
			| unpaired_token47 = IMPL
			| unpaired_token48 = IN
			| unpaired_token49 = LET
			| unpaired_token50 = LOOP
			| unpaired_token51 = MATCH
			| unpaired_token52 = MOD
			| unpaired_token53 = MOVE
			| unpaired_token54 = MUT
			| unpaired_token55 = PRIV
			| unpaired_token56 = PUB
			| unpaired_token57 = REF
			| unpaired_token58 = RETURN
			| unpaired_token59 = STRUCT
			| unpaired_token60 = TRUE
			| unpaired_token61 = TRAIT
			| unpaired_token62 = TYPE
			| unpaired_token63 = UNSAFE
			| unpaired_token64 = USE
			| unpaired_token65 = WHILE
			| unpaired_token66 = CONTINUE
			| unpaired_token67 = PROC
			| unpaired_token68 = BOX
			| unpaired_token69 = CONST
			| unpaired_token70 = WHERE
			| unpaired_token71 = TYPEOF
			| unpaired_token72 = INNER_DOC_COMMENT
			| unpaired_token73 = OUTER_DOC_COMMENT
			| unpaired_token74 = SHEBANG
			| unpaired_token75 = STATIC_LIFETIME
			| unpaired_token76 = ';'
			| unpaired_token77 = ','
			| unpaired_token78 = '.'
			| unpaired_token79 = '@'
			| unpaired_token80 = '#'
			| unpaired_token81 = '~'
			| unpaired_token82 = ':'
			| unpaired_token83 = '$'
			| unpaired_token84 = '='
			| unpaired_token85 = '?'
			| unpaired_token86 = '!'
			| unpaired_token87 = '<'
			| unpaired_token88 = '>'
			| unpaired_token89 = '-'
			| unpaired_token90 = '&'
			| unpaired_token91 = '|'
			| unpaired_token92 = '+'
			| unpaired_token93 = '*'
			| unpaired_token94 = '/'
			| unpaired_token95 = '^'
			| unpaired_token96 = '%'
			| unpaired_token97 = SIZEOF
		}

		syntax token_trees = token_tree*;

		syntax token_tree
		{
			| token_tree0 = delimited_token_trees
			| token_tree1 = unpaired_token
		}

		syntax delimited_token_trees
		{
			| delimited_token_trees0 = parens_delimited_token_trees
			| delimited_token_trees1 = braces_delimited_token_trees
			| delimited_token_trees2 = brackets_delimited_token_trees
		}

		syntax parens_delimited_token_trees = '(' token_trees ')';

		syntax braces_delimited_token_trees = '{' token_trees '}';

		syntax brackets_delimited_token_trees = '[' token_trees ']';
	}
}
