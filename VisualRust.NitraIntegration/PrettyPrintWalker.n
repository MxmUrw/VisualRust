using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Nitra;
using Nitra.Internal;
using Nitra.Runtime;
using Nitra.Runtime.Reflection;

namespace VisualRust.NitraIntegration
{
  public class PrettyPrintWalker : WalkerBase[StringBuilder]
  {
        public override OnDeleted(parseResult : IParseResult, startPos : int, endPos : int, sequenceInfo : SequenceInfo, context : StringBuilder) : void
        {}
        
		public override OnEmpty(ruleInfo : SubruleInfo.Empty, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void
		{}
		
		public override OnMarker(ruleInfo : SubruleInfo.Marker, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void
		{}
		
		public override OnPrefixMissed(ruleParser : ExtensibleRuleParser, pos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnRegularCall(ruleInfo : SubruleInfo.RegularCall, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnTokenString(ruleInfo : SubruleInfo.TokenString, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnSimpleCall(ruleInfo : SubruleInfo.SimpleCall, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnListItem(rawTreePtr : int, ruleInfo : SubruleInfo.ListItem, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnExtensibleCall(ruleInfo : SubruleInfo.ExtensibleCall, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnOption(ruleInfo : SubruleInfo.Option, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnList(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnDyntamicSyntaxExtensionPoint(ruleInfo : SubruleInfo.List, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnDynamicExtensibleItem(rawTreePtr : int, startPos : int, endPos : int, ruleParser : ExtensionRuleParser, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnListWithSeparator(ruleInfo : SubruleInfo.ListWithSeparator, startPos : int, endPos : int, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override OnAmbiguous(parseResult : IParseResult, parseWays : array[array[SubruleStart]], sequenceInfo : SequenceInfo, startPos : int, endPos : int, context : StringBuilder) : void 
		{}
		
		public override OnAmbiguousPrefix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PrefixRuleParser]], startPos : int, endPos : int, context : StringBuilder) : void 
		{}
		
		public override OnAmbiguousPostfix(parseResult : IParseResult, extensibleRuleParser : ExtensibleRuleParser, ambiguousPrefixs : List[ExtensionAmbiguity[PostfixRuleParser]], startPos : int, endPos : int, context : StringBuilder) : void 
		{}
		
		public override WalkSimple(startPos : int, endPos : int, ruleParser : SimpleRuleParser, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override WalkExtensible(startPos : int, endPos : int, ruleParser : ExtensibleRuleParser, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override WalkPrefix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PrefixRuleParser, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override WalkPostfix(rawTreePtr : int, startPos : int, endPos : int, ruleParser : PostfixRuleParser, parseResult : IParseResult, context : StringBuilder) : void 
		{}
		
		public override StartWalkSequence(sequenceInfo : SequenceInfo) : void 
		{}
		
		public override FinishWalkSequence(sequenceInfo : SequenceInfo) : void 
		{}	
  }
}
